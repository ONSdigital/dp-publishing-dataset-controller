// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dataset

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/dataset"
	"sync"
)

var (
	lockClientMockGetDatasets sync.RWMutex
	lockClientMockHealthcheck sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetDatasetsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string) (dataset.List, error) {
// 	               panic("mock out the GetDatasets method")
//             },
//             HealthcheckFunc: func() (string, error) {
// 	               panic("mock out the Healthcheck method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string) (dataset.List, error)

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
	}
}

// GetDatasets calls GetDatasetsFunc.
func (mock *ClientMock) GetDatasets(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string) (dataset.List, error) {
	if mock.GetDatasetsFunc == nil {
		panic("ClientMock.GetDatasetsFunc: method is nil but Client.GetDatasets was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
	}
	lockClientMockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	lockClientMockGetDatasets.Unlock()
	return mock.GetDatasetsFunc(ctx, userAuthToken, serviceAuthToken, collectionID)
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedClient.GetDatasetsCalls())
func (mock *ClientMock) GetDatasetsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
	}
	lockClientMockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	lockClientMockGetDatasets.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *ClientMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("ClientMock.HealthcheckFunc: method is nil but Client.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	lockClientMockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	lockClientMockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedClient.HealthcheckCalls())
func (mock *ClientMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	lockClientMockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	lockClientMockHealthcheck.RUnlock()
	return calls
}
